#include<stdio.h>
#include<stdlib.h>
struct node
{
int info;
struct node *llink,*rlink;
};
typedef struct node *NODE;
NODE insert(NODE root,int item);
void inorder(NODE root);
void preorder(NODE root);
void postorder(NODE root);
void search(NODE root,int key);
void main()
{
int ch,item,key,x;
NODE root;
root=NULL;
while(1)
{
printf("1.insert to BST\n 2.inorder traversal\n 3.preorder traversal\n 4.postorder traversal\n 5.search BST\n 6.exit\n");
printf("\n enter your choice");
scanf("%d",&ch);
switch(ch)
{
case 1:do
{
printf("enter the item to be inserted \n");
scanf("%d",&item);
root=insert(root,item);
printf("enter 1 to continue 0 to exit");
scanf("%d",&x);
}
while(x!=0);
break;
case 2:inorder(root);
break;
case 3:preorder(root);
break;
case 4:postorder(root);
break;
case 5:printf("enter the key element to be searched \n");
scanf("%d",&key);
search(root,key);
break;
case 6:exit(0);
default:printf("\n enter a valid choice\n");
break;
}
}
}
void preorder(NODE root)
{
if(root==NULL)
return;
printf("%d",root->info);
preorder(root->llink);
preorder(root->rlink);
}
void postorder(NODE root)
{
if(root==NULL)
return;
postorder(root->llink);
printf("%d",root->info);
postorder(root->rlink);
}
void inorder(NODE root)
{
if(root==NULL)
return;
inorder(root->llink);
printf("%d",root->info);
inorder(root->rlink);
 }
 NODE insert(NODE root,int item)
 {
 NODE cur,prev,temp;
 temp=(NODE)malloc(sizeof(struct node));
 temp->info=item;
 temp->llink=temp->rlink=NULL;
 if(root==NULL)
 {
 return temp;
 }
 cur=root;
 while(cur!=NULL)
 {
 prev=cur;
 if(cur->info==item)
 {
 printf("element already exits\n");
 free(temp);
 return root;
 }
 if(cur->info<item)
 cur=cur->rlink;
 else
 cur=cur->llink;
 }
 if(prev->info<item)
 prev->rlink=temp;
 else
 prev->llink=temp;
 return root;
 }
 void search(NODE root,int key)
 {
 NODE cur=root;
 if(root==NULL)
 {
 printf("tree is empty \n");
 return ;
 }
 while(cur!=NULL)
 {
 if(cur->info==key)
 {
 printf("key element found");
 return ;
 }
 if(cur->info<key)
 cur=cur->rlink;
 }
 printf("key not found \n");
 }