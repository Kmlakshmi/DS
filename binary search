1.SELECTION SORT

#include<stdio.h>
int main()
{
int a[50],n,i,j,temp,min;
printf("Enter the value of n:\n");
scanf("%d",&n);
printf("Enter elements in an array:\n",n);
for(i=0;i<n;i++)
scanf("%d", &a[i]);
for(i = 0; i < n - 1; i++)
{
min=i;
for(j = i + 1; j < n; j++)
{
if(a[min] > a[j])
min=j;
}
if(min != i)
{
temp=a[i];
a[i]=a[min];
a[min]=temp;
}
}
printf("Sorted Array:\n");
for(i = 0; i < n; i++)
printf("%d\n", a[i]);
return 0;
}

2.MERGE SORT

#include<stdio.h>
void merge(int *array ,int low,int mid,int high)
{
    int resarray[25];
    int i=low;
    int k=low;
    int j=mid+1;
    
    while(i<=mid && j<=high)
    {
        if(array[i]<array[j])
        {
        resarray[k]=array[i];
        i++;
        k++;
        }
        else
        {
          resarray[k]=array[j];  
          j++;
          k++;
        }
    }
    while(i<=mid)
        resarray[k++]=array[i++];
    while(j<=high)
        resarray[k++]=array[j++];
    for(int m=low;m<=high;m++)
			array[m]=resarray[m];
}
void sort(int *array,int low,int high)
{
		if(low<high)
		{
			int mid=(low+high)/2;
			sort(array,low,mid);
			sort(array,mid+1,high);
			merge(array,low,mid,high);
		}
}
int main()
{
    int n;
    printf("Enter the size: ");
    scanf("%d", &n);
 
    int array[n];
    printf("Enter the elements of array: ");
    for (int i = 0; i < n; i++)
    {
        scanf("%d", &array[i]);
    }
 
    sort(array, 0, n - 1);
 
    printf("The sorted array is: ");
    for (int i = 0; i < n; i++)
    {
        printf("%d ", array[i]);
    }
    printf("\n");
    return 0;
}

3.QUICK SORT

#include<stdio.h>
    int partition(int a[25],int low,int high)
{
	int p,i,j,temp;
	p=a[low];
	i=low+1;
	j=high;
	while(low<high)
	{
		while(a[i]<=p&&i<high)
			i++;
		while(a[j]>p)
			j--;
		if(i<j)
		{
			temp=a[i];
			a[i]=a[j];
			a[j]=temp;
		}
		else
		{
			temp=a[low];
			a[low]=a[j];
			a[j]=temp;
			return j;
		}
	}
		return j;
	}
	void sort(int a[],int low,int high)
	{
		if(low<high)
		{
			int s=partition(a,low,high);
			sort(a,low,s-1);
			sort(a,s+1,high);
		}
	}
int main()
{
   int i, n, a[25];
   printf("Enter the array size: ");
   scanf("%d",&n);
   printf("Enter array elements:",n);
   for(i=0;i<n;i++)
    scanf("%d",&a[i]);
   sort(a,0,n-1);
   printf("Order of Sorted elements: ");
   for(i=0;i<n;i++)
   printf(" %d",a[i]);
   return 0;
}

4.WARSHALL 

#include <stdio.h>
#include <stdlib.h>
int a[10][10],t[10][10],n;

void path()
{
    int i,j,k;
    for(k=0;k<n;k++) {
        for(i=0;i<n;i++) {
            for(j=0;j<n;j++) {
                if((t[i][j]) || (t[i][k] && t[k][j])) t[i][j]=1;
            }
        }
    }
}
void main()
{
    int i,j;
    printf("\n Enter n of vertices :");
    scanf("%d",&n);
    printf("\n Enter the adjacent matrix:\n");
    for(i=0;i<n;i++)
    for(j=0;j<n;j++) {
        scanf("%d" ,&a[i][j]);
        t[i][j]=a[i][j];
    }
    path();
    printf("\n The transitive clouser matrix is:\n");
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
        {
            printf("%5d",t[i][j]);
        }
        printf("\n");
    }
}

5.FLOYD 

#include <stdio.h>

void flyd(int w[10][10], int n) {
    int i, j, k;
    for (k = 1; k <= n; k++)
        for (i = 1; i <= n; i++)
            for (j = 1; j <= n; j++)
                w[i][j] = (w[i][j] < w[i][k] + w[k][j]) ? w[i][j] : (w[i][k] + w[k][j]);
}

int main() {
    int a[10][10];
    int n, i, j;

    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    printf("Enter the weighted matrix:\n");
    for (i = 1; i <= n; i++)
        for (j = 1; j <= n; j++)
            scanf("%d", &a[i][j]);

    flyd(a, n);

    printf("The shortest path matrix is:\n");
    for (i = 1; i <= n; i++) {
        for (j = 1; j <= n; j++) {
            printf("%d ", a[i][j]);
        }
        printf("\n");
    }

    return 0;
}

6. GREEDY 

#include <stdio.h>
#define MAX 20
typedef struct
 {
    float w;
    float p;
    float r;
} Kobject;
int n;
float M;
void ReadObjects(Kobject obj[]);
void Knapsack(Kobject Kobj[]);
int main()
 {
  Kobject obj[MAX];
  printf("Enter number of objects: ");
 scanf("%d", &n);
 ReadObjects(obj);
   Knapsack(obj);
  return 0;
}
void ReadObjects(Kobject obj[]) {
    Kobject temp;
    printf("Enter the max capacity of Knapsack: ");
    scanf("%f", &M);
    printf("Enter weight: ");
    for(int i = 0; i < n; i++)
        scanf("%f", &obj[i].w);
    printf("Enter profits: ");
    for(int i = 0; i < n; i++)
        scanf("%f", &obj[i].p);
    for(int i = 0; i < n; i++)
        obj[i].r = obj[i].p / obj[i].w;
    for(int i = 0; i < n - 1; i++)
        for(int j = 0; j < n - 1 - i; j++)
            if(obj[j].r < obj[j+1].r) {
                temp = obj[j];
                obj[j] = obj[j+1];
                obj[j+1] = temp;
            }
}
void Knapsack(Kobject Kobj[]) {
    float X[MAX];
    float totalprofit = 0;
    float u = M;
    int i;
    for(i = 0; i < n; i++)
        X[i] = 0;
    for(i = 0; i < n; i++) {
        if(Kobj[i].w > u)
            break;
        else {
            X[i] = 1;
            totalprofit += Kobj[i].p;
            u -= Kobj[i].w;
        }
    }
    printf("i=%d\n", i);
    if(i < n) {
        X[i] = u / Kobj[i].w;
        totalprofit += (X[i] * Kobj[i].p);
    }
    printf("The solution vector, X[]:\n");
    for(i = 0; i < n; i++)
        printf("%.2f ", X[i]);
    printf("\nTotal profit is: %.2f\n", totalprofit);
}

7.KNAPSACK

#include <stdio.h>
#define MAX 20

int W[MAX];
int p[MAX];
int n;
int M;
int v[MAX][MAX];
int keep[MAX][MAX];
void ReadObjects();
int Knapsack();
int main()
{   
    int Optsoln;
    ReadObjects();
    for(int i=0;i<=M;i++)
        v[0][i]=0;
    for(int i=0;i<=n;i++)
        v[i][0]=0;
    Optsoln=Knapsack();
    printf("Optimal solution=%d\n",Optsoln);
    return 0;
}
void ReadObjects()
{
    printf("Knapsack problem-Dynamic programming solution:\n");
    printf("Enter the max capacity of Knapsack:");
    scanf("%d",&M);
    printf("Enter number of objects:");
    scanf("%d",&n);
    printf("Enter the weights:\n");
    for(int i=1;i<=n;i++)
        scanf("%d",&W[i]);
    printf("Enter the profits:\n");
    for(int i=1;i<=n;i++)
        scanf("%d",&p[i]);
}
int Knapsack()
{
    int r;
    for(int i=1;i<=n;i++)
        for(int j=0;j<=M;j++)
            if((W[i]<=j)&&(p[i]+v[i-1][j-W[i]]>v[i-1][j]))
            {
                v[i][j]=p[i]+v[i-1][j-W[i]];
                keep[i][j]=1;
            }
            else
            {
                v[i][j]=v[i-1][j];
                keep[i][j]=0;
            }
    r=M;
    printf("Items=\n");
    for(int i=n;i>0;i--)
        if(keep[i][r]==1)
        {
            printf("%d\n", i);
            r=r-W[i];
        }
    printf("\n");
    return v[n][M];
}
